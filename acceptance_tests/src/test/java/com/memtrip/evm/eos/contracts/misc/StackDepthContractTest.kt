package com.memtrip.evm.eos.contracts.misc

import com.memtrip.eos.http.rpc.Api
import com.memtrip.evm.eos.Config
import com.memtrip.evm.eos.SetupTransactions
import com.memtrip.evm.eos.evm.EvmSender
import com.memtrip.evm.eos.faultTolerant
import com.memtrip.evm.eos.evm.contracts.misc.StackDepthContract
import com.memtrip.evm.ethereum.toHexString
import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import org.junit.Assert.assertEquals
import org.junit.Test
import java.util.concurrent.TimeUnit

class StackDepthContractTest {

    private val okHttpClient = OkHttpClient.Builder()
        .addInterceptor(HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.BODY))
        .connectTimeout(10, TimeUnit.SECONDS)
        .readTimeout(10, TimeUnit.SECONDS)
        .writeTimeout(10, TimeUnit.SECONDS)
        .build()

    private val chainApi = Api(Config.CHAIN_API_BASE_URL, okHttpClient).chain

    private val setupTransactions = SetupTransactions(chainApi)

    @Test
    fun `The StackDepth contract is created`() {

        // given
        val (newAccountName, newAccountPrivateKey, newEthAccount) = setupTransactions.seed()

        val contract = StackDepthContract(
            newAccountName,
            newAccountPrivateKey,
            newEthAccount
        )

        // when
        val createContract = contract.createContract().blockingGet()

        // then
        assertEquals(202, createContract.statusCode)

        // and when
        assertEquals(1, createContract.code.size)
        assertEquals(
            "608060405234801561001057600080fd5b506004361061002b5760003560e01c80638d7655b114610030575b600080fd5b61003861003a565b005b6000604051610048906101b6565b604051809103906000f080158015610064573d6000803e3d6000fd5b509050600060608273ffffffffffffffffffffffffffffffffffffffff166001604051602401808260ff1681526020019150506040516020818303038152906040527fedd004e5000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b602083106101475780518252602082019150602081019050602083039250610124565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146101a7576040519150601f19603f3d011682016040523d82523d6000602084013e6101ac565b606091505b5091509150505050565b610e4a806101c48339019056fe608060405234801561001057600080fd5b50610e2a806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063edd004e514610030575b600080fd5b61005c6004803603602081101561004657600080fd5b810190808035906020019092919050505061005e565b005b600060405161006c906101db565b604051809103906000f080158015610088573d6000803e3d6000fd5b509050600060608273ffffffffffffffffffffffffffffffffffffffff166001604051602401808260ff1681526020019150506040516020818303038152906040527fedd004e5000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b6020831061016b5780518252602082019150602081019050602083039250610148565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146101cb576040519150601f19603f3d011682016040523d82523d6000602084013e6101d0565b606091505b509150915050505050565b610c0d806101e98339019056fe608060405234801561001057600080fd5b50610bed806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063edd004e514610030575b600080fd5b61005c6004803603602081101561004657600080fd5b810190808035906020019092919050505061005e565b005b600060405161006c906101db565b604051809103906000f080158015610088573d6000803e3d6000fd5b509050600060608273ffffffffffffffffffffffffffffffffffffffff166001604051602401808260ff1681526020019150506040516020818303038152906040527fedd004e5000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b6020831061016b5780518252602082019150602081019050602083039250610148565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146101cb576040519150601f19603f3d011682016040523d82523d6000602084013e6101d0565b606091505b509150915050505050565b6109d0806101e98339019056fe608060405234801561001057600080fd5b506109b0806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063edd004e514610030575b600080fd5b61005c6004803603602081101561004657600080fd5b810190808035906020019092919050505061005e565b005b600060405161006c906101db565b604051809103906000f080158015610088573d6000803e3d6000fd5b509050600060608273ffffffffffffffffffffffffffffffffffffffff166001604051602401808260ff1681526020019150506040516020818303038152906040527fedd004e5000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b6020831061016b5780518252602082019150602081019050602083039250610148565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146101cb576040519150601f19603f3d011682016040523d82523d6000602084013e6101d0565b606091505b509150915050505050565b610793806101e98339019056fe608060405234801561001057600080fd5b50610773806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063edd004e514610030575b600080fd5b61005c6004803603602081101561004657600080fd5b810190808035906020019092919050505061005e565b005b600060405161006c906101db565b604051809103906000f080158015610088573d6000803e3d6000fd5b509050600060608273ffffffffffffffffffffffffffffffffffffffff166001604051602401808260ff1681526020019150506040516020818303038152906040527fedd004e5000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b6020831061016b5780518252602082019150602081019050602083039250610148565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146101cb576040519150601f19603f3d011682016040523d82523d6000602084013e6101d0565b606091505b509150915050505050565b610556806101e98339019056fe608060405234801561001057600080fd5b50610536806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063edd004e514610030575b600080fd5b61005c6004803603602081101561004657600080fd5b810190808035906020019092919050505061005e565b005b600060405161006c906101db565b604051809103906000f080158015610088573d6000803e3d6000fd5b509050600060608273ffffffffffffffffffffffffffffffffffffffff166001604051602401808260ff1681526020019150506040516020818303038152906040527fedd004e5000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b6020831061016b5780518252602082019150602081019050602083039250610148565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146101cb576040519150601f19603f3d011682016040523d82523d6000602084013e6101d0565b606091505b509150915050505050565b610319806101e98339019056fe608060405234801561001057600080fd5b506102f9806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063edd004e514610030575b600080fd5b61005c6004803603602081101561004657600080fd5b810190808035906020019092919050505061005e565b005b600060405161006c906101db565b604051809103906000f080158015610088573d6000803e3d6000fd5b509050600060608273ffffffffffffffffffffffffffffffffffffffff166001604051602401808260ff1681526020019150506040516020818303038152906040527fedd004e5000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b6020831061016b5780518252602082019150602081019050602083039250610148565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146101cb576040519150601f19603f3d011682016040523d82523d6000602084013e6101d0565b606091505b509150915050505050565b60dd806101e88339019056fe6080604052348015600f57600080fd5b5060bf8061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063edd004e514602d575b600080fd5b605660048036036020811015604157600080fd5b81019080803590602001909291905050506058565b005b3373ffffffffffffffffffffffffffffffffffffffff1660001b6040518082815260200191505060405180910390a05056fea265627a7a72315820374a1bb8f5cfebdaa36c6fb86db0fc87828a32df0973231ec141f72531f6412264736f6c63430005100032a265627a7a7231582047a6bc1900cdc87b3546541ec742be1bb3e070d38f017a524e3cee8aef198d9f64736f6c63430005100032a265627a7a72315820d6311837e3e9a9188b95f7aaaf4bf4d4cdfc5c32e9cfc801714343177b3ba73564736f6c63430005100032a265627a7a72315820795b4e1b08aec8a4a3e1b311c8dc4dc0e56d4adb22292c4efdcb8f9dd1f1407564736f6c63430005100032a265627a7a723158202bfdab0296b3f0fb1a8e21438d4fbdbbae7f2224f3e68f026069fdf320d275ac64736f6c63430005100032a265627a7a72315820c8250f97d8c13db675a81eec20a57479ce99f2e8cabddb33ee0b91e36663911a64736f6c63430005100032a265627a7a72315820182f5dd9ede48866437b04bd1cab24ebbe1370f4242a93c6ac3f956b8060236c64736f6c63430005100032a265627a7a723158204830ff2df33af3f372a5300782b5c1f49b67a01ba29d6743db5b864047b463e164736f6c63430005100032",
            createContract.code[0].code
        )
    }

    @Test
    fun `Call the depthCharge method that will attempt 6 call frames`() {
        // given
        val (newAccountName, newAccountPrivateKey, newEthAccount) = setupTransactions.seed(17000)
        val contract = StackDepthContract(newAccountName, newAccountPrivateKey, newEthAccount)
        val createContract = contract.createContract().blockingGet()
        assertEquals(202, createContract.statusCode)

        // when
        val response = faultTolerant {
            contract.depthCharge(
                EvmSender(
                    2,
                    newEthAccount,
                    newAccountName,
                    newAccountPrivateKey,
                    contract.ownerAccountIdentifier.toHexString()
                )
            ).blockingGet()
        }

        // then
        assertEquals(202, response.statusCode)
    }
}