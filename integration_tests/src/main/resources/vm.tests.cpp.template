//
// Auto generated based off the Ethereum tests found here:
// https://github.com/ethereum/tests/blob/develop/VMTests/
//
#include "catch.hpp"
#include <evm/utils.h>
#include <evm/vm.h>
#include <evm/hex.h>
#include <evm/return_data.h>
#include <evm/call.h>
#include <evm/gasometer.h>
#include "external_mock.h"

<#list tests as test>
TEST_CASE("${test.name}______${test.fixture._info.sourceHash}", "[vm]") {
  std::string bytecode_str = "${test.fixture.exec.code[2..]}";
  params_t params =  Utils::params(Hex::hexToBytes(bytecode_str), bytes_t());
  ExternalMock ext {};
  VM vm {};
  Call call(0);
  account_store_t* accountItems = new account_store_t();
  AccountState accountState(accountItems);
  Gasometer gasometer(0);
  bytes_t* memoryBytes = new bytes_t();
  Memory mem(memoryBytes);
  std::vector<uint256_t>* stackItems = new std::vector<uint256_t>();
  StackMachine sm(stackItems);

  // when
  vm.execute(mem, sm, accountState, gasometer, params, ext, call, Utils::env());

  <#if test.fixture.post??>
  // then
  <#list test.fixture.post.accountState.storage?keys as key>
  CHECK("${test.fixture.post.accountState.storage[key]}" ==
    Utils::uint256_2str(accountState.get(${key}))
  );
  </#list>
  </#if>
}

</#list>