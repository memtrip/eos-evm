//
// ${lastUpdated?string('dd.MM.yyyy')}
// Auto generated based off the Ethereum tests found here:
// https://github.com/ethereum/tests/blob/develop/VMTests/
//
#include "catch.hpp"
#include <memory>
#include <evm/utils.h>
#include <evm/vm.h>
#include <evm/hex.hpp>
#include <evm/return_data.h>
#include <evm/call.h>
#include <evm/gasometer.h>
#include <evm/big_int.hpp>
#include "external_mock.h"
#include <evm/operation.h>

<#list tests as test>
TEST_CASE("${test.name}______${test.fixture._info.sourceHash}", "[vm]") {
  env_t env = {
    uint256_t(1), /* chainId */
    BigInt::fromHex("${test.fixture.env.currentNumber[2..]}"), /* blockNumber */
    BigInt::fromHex("${test.fixture.env.currentTimestamp[2..]}"), /* timestamp */
    BigInt::fromHex("${test.fixture.env.currentGasLimit[2..]}"), /* gasLimit */
    BigInt::fromHex("${test.fixture.env.currentCoinbase[2..]}"), /* coinbase */
    BigInt::fromHex("${test.fixture.env.currentDifficulty[2..]}"), /* difficulty */
    BigInt::fromHex("${(test.fixture.env.previousHash[2..])!""}") /* blockHash */
  };

  std::string bytecode_str = "${test.fixture.exec.code[2..]}";
  <#if test.fixture.exec.data[2..]?has_content>
  bytes_t data_bytes = Hex::hexToBytes("${test.fixture.exec.data[2..]}");
  <#else>
  bytes_t data_bytes = bytes_t();
  </#if>

  params_t params = {
    BigInt::fromHex("${test.fixture.exec.address[2..]}"), /* codeAddress*/
    uint256_t(0xf9313a), /* codeHash */
    uint256_t(0x193821), /* codeVersion */
    BigInt::fromHex("${test.fixture.exec.address[2..]}"), /* address */
    BigInt::fromHex("${test.fixture.exec.caller[2..]}"), /* sender */
    BigInt::fromHex("${test.fixture.exec.origin[2..]}"), /* origin */
    gas_t(${test.fixture.exec.gas}), /* gas */
    BigInt::fromHex("${test.fixture.exec.gasPrice[2..]}"), /* gasPrice */
    BigInt::fromHex("${test.fixture.exec.value[2..]}"), /* value */
    Hex::hexToBytes(bytecode_str), /* code */
    data_bytes /* data */
  };

  std::shared_ptr<Context> context = std::make_shared<Context>(
    env.chainId,
    env.blockNumber,
    env.timestamp,
    env.gasLimit,
    env.coinbase,
    env.difficulty,
    env.blockHash,
    uint256_t(0xea0e9a), /* address */
    uint256_t(0xf9313a), /* codeHash */
    uint256_t(0x193821), /* codeVersion */
    uint256_t(0xea0e9a), /* address */
    BigInt::fromHex("cd1722f3947def4cf144679da39c4c32bdc35681"),
    uint256_t(0x1283fe), /* origin */
    100000,
    uint256_t(0),
    uint256_t(0),
    std::make_shared<bytes_t>(codeBytes),
    std::make_shared<bytes_t>()
  );

  std::shared_ptr<ExternalMock> external = std::make_shared<ExternalMock>();
  <#if test.fixture.pre.accountState.storage?has_content>
  <#list test.fixture.pre.accountState.storage?keys as key>
  external->storageResponder.push_back(std::make_pair(
    uint256_t(${key}),
    Hex::hexToBytes("${test.fixture.pre.accountState.storage[key]}")
  ));
  </#list>
  </#if>

  std::shared_ptr<std::vector<uint256_t>> stackItems = std::make_shared<std::vector<uint256_t>>();
  std::shared_ptr<StackMachine> stack = std::make_shared<StackMachine>(stackItems);
  std::shared_ptr<Gasometer> gasometer = std::make_shared<Gasometer>(context->gas);
  VM vm(stack, gasometer);

  std::shared_ptr<Call> call = std::make_shared<Call>(0);
  std::shared_ptr<account_store_t> cacheItems = std::make_shared<account_store_t>();
  std::shared_ptr<AccountState> accountState = std::make_shared<AccountState>(cacheItems);

  std::shared_ptr<bytes_t> memoryBytes = std::make_shared<bytes_t>();
  std::shared_ptr<Memory> mem = std::make_shared<Memory>(memoryBytes);
  Operation operation = Operation();

  // when
  vm.execute(operation, context, mem, accountState, external, call);

  // then
  <#if test.fixture.post??>
  <#list test.fixture.post.accountState.storage?keys as key>
  CHECK("${test.fixture.post.accountState.storage[key]}" ==
    <#if key?length <= 8>
    Utils::uint256_2str(accountState->get(external, uint256_t(${key}), context->codeAddress))
    <#else>
    Utils::uint256_2str(
      accountState->get(external, 
        BigInt::fromHex("${key[2..]}"),
        context->codeAddress
      )
    )
    </#if>
  );
  </#list>
  </#if>
}

</#list>