#pragma once
#include <evm/types.h>
#include <evm/opcode.h>
#include <evm/stack.hpp>

enum InstructionVerifyResult {
  INSTRUCTION_NOT_DEFINED,
  INSTRUCTION_ERROR_UNDER_FLOW,
  INSTRUCTION_ERROR_OUT_OF_STACK,
  INSTRUCTION_VALID
};

typedef InstructionVerifyResult instruction_verify_t;

class Instruction { 
  public: 
    /*
      A 4 byte representation of an EVM instruction; [opcode][args][return][tier]
    */
    static constexpr instruct_t values[256] = {
      { 0x00, 0x00, 0x00, 0x00 }, // ((STOP (0x00)), 0, 0, ZERO)
      { 0x01, 0x02, 0x01, 0x02 }, // ((ADD (0x01)), 2, 1, VERY_LOW)
      { 0x02, 0x02, 0x01, 0x03 }, // ((MUL (0x02)), 2, 1, LOW)
      { 0x03, 0x02, 0x01, 0x02 }, // ((SUB (0x03)), 2, 1, VERY_LOW)
      { 0x04, 0x02, 0x01, 0x03 }, // ((DIV (0x04)), 2, 1, LOW)
      { 0x05, 0x02, 0x01, 0x03 }, // ((SDIV (0x05)), 2, 1, LOW)
      { 0x06, 0x02, 0x01, 0x03 }, // ((MOD (0x06)), 2, 1, LOW)
      { 0x07, 0x02, 0x01, 0x03 }, // ((SMOD (0x07)), 2, 1, LOW)
      { 0x08, 0x03, 0x01, 0x04 }, // ((ADDMOD (0x08)), 3, 1, MID)
      { 0x09, 0x03, 0x01, 0x04 }, // ((MULMOD (0x09)), 3, 1, MID)
      { 0x0A, 0x02, 0x01, 0x07 }, // ((EXP (0x0A)), 2, 1, SPECIAL)
      { 0x0B, 0x02, 0x01, 0x03 }, // ((SIGNEXTEND (0x0B)), 2, 1, LOW)
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x10, 0x02, 0x01, 0x02 }, // ((LT (0x10)), 2, 1, VERY_LOW)
      { 0x11, 0x02, 0x01, 0x02 }, // ((GT (0x11)), 2, 1, VERY_LOW)
      { 0x12, 0x02, 0x01, 0x02 }, // ((SLT (0x12)), 2, 1, VERY_LOW)
      { 0x13, 0x02, 0x01, 0x02 }, // ((SGT (0x13)), 2, 1, VERY_LOW)G
      { 0x14, 0x02, 0x01, 0x02 }, // ((EQ (0x14)), 2, 1, VERY_LOW)
      { 0x15, 0x01, 0x01, 0x02 }, // ((ISZERO (0x15)), 1, 1, VERY_LOW)
      { 0x16, 0x02, 0x01, 0x02 }, // ((AND (0x16)), 2, 1, VERY_LOW)
      { 0x17, 0x02, 0x01, 0x02 }, // ((OR (0x17)), 2, 1, VERY_LOW)
      { 0x18, 0x02, 0x01, 0x02 }, // ((XOR (0x18)), 2, 1, VERY_LOW)
      { 0x19, 0x01, 0x01, 0x02 }, // ((NOT (0x19)), 1, 1, VERY_LOW)
      { 0x1A, 0x02, 0x01, 0x02 }, // ((BYTE (0x1A)), 2, 1, VERY_LOW)
      { 0x1B, 0x02, 0x01, 0x02 }, // ((SHL (0x1B)), 2, 1, VERY_LOW)
      { 0x1C, 0x02, 0x01, 0x02 }, // ((SHR (0x1C)), 2, 1, VERY_LOW)
      { 0x1D, 0x02, 0x01, 0x02 }, // ((SAR (0x1D)), 2, 1, VERY_LOW)
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x20, 0x02, 0x01, 0x07 }, // ((SHA3 (0x20)), 2, 1, SPECIAL)
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x30, 0x00, 0x01, 0x01 }, // ((ADDRESS (0x20)), 0, 1, BASE)
      { 0x31, 0x01, 0x01, 0x07 }, // ((BALANCE (0x31)), 1, 1, SPECIAL)
      { 0x32, 0x00, 0x01, 0x01 }, // ((ORIGIN (0x32)), 0, 1, BASE)
      { 0x33, 0x00, 0x01, 0x01 }, // ((CALLER (0x33)), 0, 1, BASE)
      { 0x34, 0x00, 0x01, 0x01 }, // ((CALLVALUE (0x34)), 0, 1, BASE)
      { 0x35, 0x01, 0x01, 0x02 }, // ((CALLDATALOAD (0x35)), 1, 1, VERY_LOW)
      { 0x36, 0x00, 0x01, 0x01 }, // ((CALLDATASIZE (0x36)), 0, 1, BASE)
      { 0x37, 0x03, 0x00, 0x02 }, // ((CALLDATACOPY (0x37)), 3, 0, VERY_LOW)
      { 0x38, 0x00, 0x01, 0x01 }, // ((CODESIZE (0x38)), 0, 1, BASE)
      { 0x39, 0x03, 0x00, 0x02 }, // ((CODECOPY (0x39)), 3, 0, VERY_LOW)
      { 0x3A, 0x00, 0x01, 0x01 }, // ((GASPRICE (0x3A)), 0, 1, BASE)
      { 0x3B, 0x01, 0x01, 0x07 }, // ((EXTCODESIZE (0x3B)), 1, 1, SPECIAL)
      { 0x3C, 0x04, 0x00, 0x07 }, // ((EXTCODECOPY (0x3C)), 4, 0, SPECIAL)
      { 0x3D, 0x00, 0x01, 0x01 }, // ((RETURNDATASIZE (0x3D)), 0, 1, BASE)
      { 0x3E, 0x03, 0x00, 0x02 }, // ((RETURNDATACOPY (0x3E)), 3, 0, VERY_LOW)
      { 0x3F, 0x01, 0x01, 0x07 }, // ((EXTCODEHASH (0x3F)), 1, 1, SPECIAL)
      { 0x40, 0x01, 0x01, 0x06 }, // ((BLOCKHASH (0x40)), 1, 1, EXT)
      { 0x41, 0x00, 0x01, 0x01 }, // ((COINBASE (0x41)), 0, 1, BASE)
      { 0x42, 0x00, 0x01, 0x01 }, // ((TIMESTAMP (0x42)), 0, 1, BASE)
      { 0x43, 0x00, 0x01, 0x01 }, // ((NUMBER (0x43)), 0, 1, BASE)
      { 0x44, 0x00, 0x01, 0x01 }, // ((DIFFICULTY (0x44)), 0, 1, BASE)
      { 0x45, 0x00, 0x01, 0x01 }, // ((GASLIMIT (0x45)), 0, 1, BASE)
      { 0x46, 0x00, 0x01, 0x01 }, // ((CHAINID (0x46)), 0, 1, BASE)
      { 0x47, 0x00, 0x01, 0x03 }, // ((SELFBALANCE (0x47)), 0, 1, LOW)
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x50, 0x01, 0x00, 0x01 }, // ((POP (0x50)), 1, 0, BASE)
      { 0x51, 0x01, 0x01, 0x02 }, // ((MLOAD (0x51)), 1, 1, VERY_LOW)
      { 0x52, 0x02, 0x00, 0x02 }, // ((MSTORE (0x52)), 2, 0, VERY_LOW)
      { 0x53, 0x02, 0x00, 0x02 }, // ((MSTORE8 (0x53)), 2, 0, VERY_LOW)
      { 0x54, 0x01, 0x01, 0x07 }, // ((SLOAD (0x54)), 1, 1, SPECIAL)
      { 0x55, 0x02, 0x00, 0x07 }, // ((SSTORE (0x55)), 2, 0, SPECIAL)
      { 0x56, 0x01, 0x00, 0x04 }, // ((JUMP (0x56)), 1, 0, MID)
      { 0x57, 0x02, 0x00, 0x05 }, // ((JUMPI (0x57)), 2, 0, HIGH))
      { 0x58, 0x00, 0x01, 0x01 }, // ((PC (0x58)), 0, 1, BASE)
      { 0x59, 0x00, 0x01, 0x01 }, // ((MSIZE (0x59)), 0, 1, BASE)
      { 0x5A, 0x00, 0x01, 0x01 }, // ((GAS (0x5A)), 0, 1, BASE)
      { 0x5B, 0x00, 0x00, 0x07 }, // ((JUMPDEST (0x5B)), 0, 0, SPECIAL)
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x60, 0x00, 0x01, 0x02 }, // ((PUSH1 (0x60)), 0, 1, VERY_LOW)
      { 0x61, 0x00, 0x01, 0x02 }, // ((PUSH2 (0x61)), 0, 1, VERY_LOW)
      { 0x62, 0x00, 0x01, 0x02 }, // ((PUSH3 (0x62)), 0, 1, VERY_LOW)
      { 0x63, 0x00, 0x01, 0x02 }, // ((PUSH4 (0x63)), 0, 1, VERY_LOW)
      { 0x64, 0x00, 0x01, 0x02 }, // ((PUSH5 (0x64)), 0, 1, VERY_LOW)
      { 0x65, 0x00, 0x01, 0x02 }, // ((PUSH6 (0x65)), 0, 1, VERY_LOW)
      { 0x66, 0x00, 0x01, 0x02 }, // ((PUSH7 (0x66)), 0, 1, VERY_LOW)
      { 0x67, 0x00, 0x01, 0x02 }, // ((PUSH8 (0x67)), 0, 1, VERY_LOW)
      { 0x68, 0x00, 0x01, 0x02 }, // ((PUSH9 (0x68)), 0, 1, VERY_LOW)
      { 0x69, 0x00, 0x01, 0x02 }, // ((PUSH10 (0x69)), 0, 1, VERY_LOW)
      { 0x6A, 0x00, 0x01, 0x02 }, // ((PUSH11 (0x6A)), 0, 1, VERY_LOW)
      { 0x6B, 0x00, 0x01, 0x02 }, // ((PUSH12 (0x6B)), 0, 1, VERY_LOW)
      { 0x6C, 0x00, 0x01, 0x02 }, // ((PUSH13 (0x6C)), 0, 1, VERY_LOW)
      { 0x6D, 0x00, 0x01, 0x02 }, // ((PUSH14 (0x6D)), 0, 1, VERY_LOW)
      { 0x6E, 0x00, 0x01, 0x02 }, // ((PUSH15 (0x6E)), 0, 1, VERY_LOW)
      { 0x6F, 0x00, 0x01, 0x02 }, // ((PUSH16 (0x6F)), 0, 1, VERY_LOW)
      { 0x70, 0x00, 0x01, 0x02 }, // ((PUSH17 (0x70)), 0, 1, VERY_LOW)
      { 0x71, 0x00, 0x01, 0x02 }, // ((PUSH18 (0x71)), 0, 1, VERY_LOW)
      { 0x72, 0x00, 0x01, 0x02 }, // ((PUSH19 (0x72)), 0, 1, VERY_LOW)
      { 0x73, 0x00, 0x01, 0x02 }, // ((PUSH20 (0x73)), 0, 1, VERY_LOW)
      { 0x74, 0x00, 0x01, 0x02 }, // ((PUSH21 (0x74)), 0, 1, VERY_LOW)
      { 0x75, 0x00, 0x01, 0x02 }, // ((PUSH22 (0x75)), 0, 1, VERY_LOW)
      { 0x76, 0x00, 0x01, 0x02 }, // ((PUSH23 (0x76)), 0, 1, VERY_LOW)
      { 0x77, 0x00, 0x01, 0x02 }, // ((PUSH24 (0x77)), 0, 1, VERY_LOW)
      { 0x78, 0x00, 0x01, 0x02 }, // ((PUSH25 (0x78)), 0, 1, VERY_LOW)
      { 0x79, 0x00, 0x01, 0x02 }, // ((PUSH26 (0x79)), 0, 1, VERY_LOW)
      { 0x7A, 0x00, 0x01, 0x02 }, // ((PUSH27 (0x7A)), 0, 1, VERY_LOW)
      { 0x7B, 0x00, 0x01, 0x02 }, // ((PUSH28 (0x7B)), 0, 1, VERY_LOW)
      { 0x7C, 0x00, 0x01, 0x02 }, // ((PUSH29 (0x7C)), 0, 1, VERY_LOW)
      { 0x7D, 0x00, 0x01, 0x02 }, // ((PUSH30 (0x7D)), 0, 1, VERY_LOW)
      { 0x7E, 0x00, 0x01, 0x02 }, // ((PUSH31 (0x7E)), 0, 1, VERY_LOW)
      { 0x7F, 0x00, 0x01, 0x02 }, // ((PUSH32 (0x7F)), 0, 1, VERY_LOW)
      { 0x80, 0x01, 0x02, 0x02 }, // ((DUP1 (0x80)), 1, 2, VERY_LOW)
      { 0x81, 0x02, 0x03, 0x02 }, // ((DUP2 (0x81)), 2, 3, VERY_LOW)
      { 0x82, 0x03, 0x04, 0x02 }, // ((DUP3 (0x82)), 3, 4, VERY_LOW)
      { 0x83, 0x04, 0x05, 0x02 }, // ((DUP4 (0x83)), 4, 5, VERY_LOW)
      { 0x84, 0x05, 0x06, 0x02 }, // ((DUP5 (0x84)), 5, 6, VERY_LOW)
      { 0x85, 0x06, 0x07, 0x02 }, // ((DUP6 (0x85)), 6, 7, VERY_LOW)
      { 0x86, 0x07, 0x08, 0x02 }, // ((DUP7 (0x86)), 7, 8, VERY_LOW)
      { 0x87, 0x08, 0x09, 0x02 }, // ((DUP8 (0x87)), 8, 9, VERY_LOW)
      { 0x88, 0x09, 0x0A, 0x02 }, // ((DUP9 (0x88)), 9, 10, VERY_LOW)
      { 0x89, 0x0A, 0x0B, 0x02 }, // ((DUP10 (0x89)), 10, 11, VERY_LOW)
      { 0x8A, 0x0B, 0x0C, 0x02 }, // ((DUP11 (0x8A)), 11, 12, VERY_LOW)
      { 0x8B, 0x0C, 0x0D, 0x02 }, // ((DUP12 (0x8B)), 12, 13, VERY_LOW)
      { 0x8C, 0x0D, 0x0E, 0x02 }, // ((DUP13 (0x8C)), 13, 14, VERY_LOW)
      { 0x8D, 0x0E, 0x0F, 0x02 }, // ((DUP14 (0x8D)), 14, 15, VERY_LOW)
      { 0x8E, 0x0F, 0x10, 0x02 }, // ((DUP15 (0x8E)), 15, 16, VERY_LOW)
      { 0x8F, 0x10, 0x11, 0x02 }, // ((DUP16 (0x8F)), 16, 17, VERY_LOW)
      { 0x90, 0x02, 0x02, 0x02 }, // ((SWAP1 (0x90)), 2, 2, VERY_LOW)
      { 0x91, 0x03, 0x03, 0x02 }, // ((SWAP2 (0x91)), 3, 3, VERY_LOW)
      { 0x92, 0x04, 0x04, 0x02 }, // ((SWAP3 (0x92)), 4, 4, VERY_LOW)
      { 0x93, 0x05, 0x05, 0x02 }, // ((SWAP4 (0x93)), 5, 5, VERY_LOW)
      { 0x94, 0x06, 0x06, 0x02 }, // ((SWAP5 (0x94)), 6, 6, VERY_LOW)
      { 0x95, 0x07, 0x07, 0x02 }, // ((SWAP6 (0x95)), 7, 7, VERY_LOW)
      { 0x96, 0x08, 0x08, 0x02 }, // ((SWAP7 (0x96)), 8, 8, VERY_LOW)
      { 0x97, 0x09, 0x09, 0x02 }, // ((SWAP8 (0x97)), 9, 9, VERY_LOW)
      { 0x98, 0x0A, 0x0A, 0x02 }, // ((SWAP9 (0x98)), 10, 10, VERY_LOW)
      { 0x99, 0x0B, 0x0B, 0x02 }, // ((SWAP10 (0x99)), 11, 11, VERY_LOW)
      { 0x9A, 0x0C, 0x0C, 0x02 }, // ((SWAP11 (0x9A)), 12, 12, VERY_LOW)
      { 0x9B, 0x0D, 0x0D, 0x02 }, // ((SWAP12 (0x9B)), 13, 13, VERY_LOW)
      { 0x9C, 0x0E, 0x0E, 0x02 }, // ((SWAP13 (0x9C)), 14, 14, VERY_LOW)
      { 0x9D, 0x0F, 0x0F, 0x02 }, // ((SWAP14 (0x9D)), 15, 15, VERY_LOW)
      { 0x9E, 0x10, 0x10, 0x02 }, // ((SWAP15 (0x9E)), 16, 16, VERY_LOW)
      { 0x9F, 0x11, 0x11, 0x02 }, // ((SWAP16 (0x9F)), 17, 17, VERY_LOW)
      { 0xA0, 0x02, 0x00, 0x07 }, // ((LOG0 (0xA0)), 2, 0, SPECIAL)
      { 0xA1, 0x03, 0x00, 0x07 }, // ((LOG1 (0xA1)), 3, 0, SPECIAL)
      { 0xA2, 0x04, 0x00, 0x07 }, // ((LOG2 (0xA2)), 4, 0, SPECIAL)
      { 0xA3, 0x05, 0x00, 0x07 }, // ((LOG3 (0xA3)), 5, 0, SPECIAL)
      { 0xA4, 0x06, 0x00, 0x07 }, // ((LOG4 (0xA4)), 6, 0, SPECIAL)
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0xF0, 0x03, 0x01, 0x07 }, // ((CREATE (0xF0)), 3, 1, SPECIAL)
      { 0xF1, 0x07, 0x01, 0x07 }, // ((CALL (0xF1)), 7, 1, SPECIAL)
      { 0xF2, 0x07, 0x01, 0x07 }, // ((CALLCODE (0xF2)), 7, 1, SPECIAL)
      { 0xF3, 0x02, 0x00, 0x00 }, // ((RETURN (0xF3)), 2, 0, ZERO))
      { 0xF4, 0x06, 0x01, 0x07 }, // ((DELEGATECALL (0xF4)), 6, 1, SPECIAL)
      { 0xF5, 0x04, 0x01, 0x07 }, // ((CREATE2 (0xF5)), 4, 1, SPECIAL)
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0xFA, 0x06, 0x01, 0x07 }, // ((STATICCALL (0xFA)), 6, 1, SPECIAL)
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0xFD, 0x02, 0x00, 0x00 }, // ((REVERT (0xFD)), 2, 0, ZERO))
      { 0x00, 0x00, 0x00, 0xFF }, // Unassigned
      { 0xFF, 0x01, 0x00, 0x07 } // ((SELFDESTRUCT (0xFF)), 1, 0, SPECIAL)
    };

    static uint8_t opcode(instruct_t instruction) {
      return instruction.opcode;
    }

    static uint8_t args(instruct_t instruction) {
      return instruction.args;
    }

    static uint8_t ret(instruct_t instruction) {
      return instruction.ret;
    }

    static uint8_t tier(instruct_t instruction) {
      return instruction.tier;
    }

    static bool isPush(instruct_t instruction) {
      return instruction.opcode >= Opcode::PUSH1 && instruction.opcode <= Opcode::PUSH32;
    }

    static uint8_t pushBytes(instruct_t instruction) {
      if (Instruction::isPush(instruction)) {
        return instruction.opcode - Opcode::PUSH1 + 1;
      } 
      return 0;
    }

    static uint8_t dupPosition(instruct_t instruction) {
      if (instruction.opcode >= Opcode::DUP1 && instruction.opcode <= Opcode::DUP16) {
        return instruction.opcode - Opcode::DUP1;
      }
      return 0;
    }

    static uint8_t swapPosition(instruct_t instruction) {
      if (instruction.opcode >= Opcode::SWAP1 && instruction.opcode <= Opcode::SWAP16) {
        return instruction.opcode - Opcode::SWAP1 + 1;
      }
      return 0;
    }

    static uint8_t logTopics(instruct_t instruction) {
      if (instruction.opcode >= Opcode::LOG0 && instruction.opcode <= Opcode::LOG4) {
        return instruction.opcode - Opcode::LOG0;
      }
      return 0;
    }

    static instruction_verify_t verify(instruct_t instruction, size_t stackSize) {
      if (instruction.tier == 0xFF) return InstructionVerifyResult::INSTRUCTION_NOT_DEFINED;
      if (stackSize < instruction.args) return InstructionVerifyResult::INSTRUCTION_ERROR_UNDER_FLOW;
      if (stackSize - instruction.args + instruction.ret > STACK_LIMIT) return InstructionVerifyResult::INSTRUCTION_ERROR_OUT_OF_STACK;
      return InstructionVerifyResult::INSTRUCTION_VALID;
    }
};