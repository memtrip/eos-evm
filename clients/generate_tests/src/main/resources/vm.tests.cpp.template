//
// ${lastUpdated?string('dd.MM.yyyy')}
// Auto generated based off the Ethereum tests found here:
// https://github.com/ethereum/tests/blob/develop/VMTests/
//
#include "catch.hpp"
#include "test_utils.hpp"
#include <memory>
#include <evm/utils.hpp>
#include <evm/vm.h>
#include <evm/hex.hpp>

#include <evm/call.hpp>
#include <evm/gasometer.hpp>
#include <evm/big_int.hpp>
#include "external_mock.hpp"
#include <evm/operation.hpp>

<#list tests as test>
TEST_CASE("${test.name}______${test.fixture._info.sourceHash}", "[vm]") {
  bytes_t code_bytes = Hex::hexToBytes("${test.fixture.exec.code[2..]}");
  <#if test.fixture.exec.data[2..]?has_content>
  bytes_t data_bytes = Hex::hexToBytes("${test.fixture.exec.data[2..]}");
  <#else>
  bytes_t data_bytes = bytes_t();
  </#if>

  std::shared_ptr<Context> context = std::make_shared<Context>(
    uint256_t(1), /* chainId */
    TestUtils::fromHex("${test.fixture.env.currentNumber[2..]}"), /* blockNumber */
    TestUtils::fromHex("${test.fixture.env.currentTimestamp[2..]}"), /* timestamp */
    TestUtils::fromHex("${test.fixture.env.currentGasLimit[2..]}"), /* gasLimit */
    TestUtils::fromHex("${test.fixture.env.currentCoinbase[2..]}"), /* coinbase */
    TestUtils::fromHex("${test.fixture.env.currentDifficulty[2..]}"), /* difficulty */
    TestUtils::fromHex("${(test.fixture.env.previousHash[2..])!""}"), /* blockHash */
    TestUtils::fromHex("${test.fixture.exec.address[2..]}"), /* codeAddress*/
    uint256_t(0xf9313a), /* codeHash */
    TestUtils::fromHex("${test.fixture.exec.address[2..]}"), /* address */
    TestUtils::fromHex("${test.fixture.exec.caller[2..]}"), /* sender */
    TestUtils::fromHex("${test.fixture.exec.origin[2..]}"), /* origin */
    gas_t(${test.fixture.exec.gas}), /* gas */
    TestUtils::fromHex("${test.fixture.exec.gasPrice[2..]}"), /* gasPrice */
    TestUtils::fromHex("${test.fixture.exec.value[2..]}"), /* value */
    false,
    std::make_shared<bytes_t>(code_bytes),
    std::make_shared<bytes_t>(data_bytes)
  );

  std::shared_ptr<ExternalMock> external = std::make_shared<ExternalMock>();
  <#if test.fixture.pre.accountState.storage?has_content>
  <#list test.fixture.pre.accountState.storage?keys as key>
  external->storageResponder.push_back(std::make_pair(
    uint256_t(${key}),
    BigInt::fromBigEndianBytes(Hex::hexToBytes("${test.fixture.pre.accountState.storage[key]}"))
  ));
  </#list>
  </#if>

  std::shared_ptr<StackMachine> stack = std::make_shared<StackMachine>();
  std::shared_ptr<Gasometer> gasometer = std::make_shared<Gasometer>(context->gas);
  VM vm(stack, gasometer);
  std::shared_ptr<PendingState> pendingState = std::make_shared<PendingState>();

  std::shared_ptr<Memory> mem = std::make_shared<Memory>();
  std::shared_ptr<Operation> operation = std::make_shared<Operation>();
  std::shared_ptr<GasCalculation> gasCalculation = std::make_shared<GasCalculation>();

  // when
  vm.execute(0, context, mem, operation, gasCalculation, pendingState, external);

  // then
  <#if test.fixture.post??><#if test.fixture.post.accountState??>
  <#list test.fixture.post.accountState.storage?keys as key>
  CHECK("${test.fixture.post.accountState.storage[key]}" ==
    <#if key?length <= 8>
    Utils::uint256_2str(
      pendingState->getState(
        uint256_t(${key}),
        context->codeAddress, [external, context] () {
          return external->storageAt(uint256_t(${key}), context->codeAddress);
        }
      )
    )
    <#else>
    Utils::uint256_2str(
      pendingState->getState(
        TestUtils::fromHex("${key[2..]}"),
        context->codeAddress, [external, context] () {
          return external->storageAt(TestUtils::fromHex("${key[2..]}"), context->codeAddress);
        }
      )
    )
    </#if>
  );
  </#list>
  </#if></#if>
}

</#list>