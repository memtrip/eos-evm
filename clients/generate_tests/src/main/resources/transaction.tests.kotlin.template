import com.memtrip.eos.chain.actions.transaction.TransactionContext
import com.memtrip.eos.core.crypto.EosPrivateKey
import com.memtrip.eos.http.rpc.Api
import com.memtrip.eos_evm.eos.*
import com.memtrip.eos_evm.eos.state.GetAccountState
import com.memtrip.eos_evm.eos.actions.execute.ExecuteAction
import com.memtrip.eos_evm.ethereum.EthereumTransaction
import com.memtrip.evm.toHexString
import com.memtrip.evm.toHexBytes
import com.memtrip.evm.pad256
import com.memtrip.eos_evm.ethereum.AccountStateKey
import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import org.junit.Assert.assertEquals
import org.junit.Test
import java.util.concurrent.TimeUnit
import com.memtrip.eos_evm.eos.TestTransaction
import com.memtrip.eos_evm.eos.faultTolerantCreateAccount
import com.memtrip.eos_evm.assertConsoleError

//
// ${lastUpdated?string('dd.MM.yyyy')}
// Auto generated based off the Ethereum tests found here:
// https://github.com/ethereum/tests/blob/develop/VMTests/
//
class TransactionTests {
    private val okHttpClient = OkHttpClient.Builder()
        .addInterceptor(HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.BODY))
        .connectTimeout(10, TimeUnit.SECONDS)
        .readTimeout(10, TimeUnit.SECONDS)
        .writeTimeout(10, TimeUnit.SECONDS)
        .build()

    private val chainApi = Api(Config.CHAIN_API_BASE_URL, okHttpClient).chain

    private val setupTransactions = SetupTransactions(chainApi)

    private val executeAction = ExecuteAction(chainApi)

    private val getAccountState = GetAccountState(chainApi)

    <#list unsignedTests as test>
    <#if test.signatureAddress??>
    @Test
    fun `${test.parentName}______${test.name}`() {
        // given
        val newAccountName = generateUniqueAccountName()
        val newAccountPrivateKey = EosPrivateKey()

        val createAccountResult= setupTransactions.createAccount(
            newAccountName,
            newAccountPrivateKey,
            17000
        ).blockingGet()
        assertEquals(202, createAccountResult.statusCode)

        val createEvmAccountResponse = setupTransactions.createEthAccount(
            newAccountName, newAccountPrivateKey, "0x${test.signatureAddress}").blockingGet()
        assertEquals(202, createEvmAccountResponse.statusCode)

        val accountIdentifier = AccountIdentifier.create(newAccountName, "0x${test.signatureAddress}")

        // when
        val response = faultTolerant {
            executeAction.pushTransaction(
               newAccountName,
               "${test.rlp}",
               accountIdentifier.toHexString(),
               "",
               TransactionContext(
                   newAccountName,
                   newAccountPrivateKey,
                   transactionDefaultExpiry()
               )
           ).blockingGet()
       }

       // then
       assertEquals(500, response.statusCode)
       response.assertConsoleError("assertion failure with message")
    }
    </#if>
    </#list>
}